/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Donate {
  export type DonaterStruct = {
    mail: string;
    donatedAmount: BigNumberish;
    votingTokens: BigNumberish;
  };

  export type DonaterStructOutput = [
    mail: string,
    donatedAmount: bigint,
    votingTokens: bigint
  ] & { mail: string; donatedAmount: bigint; votingTokens: bigint };
}

export interface VoteInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeDonatorMailAdress"
      | "getAmountOfVotes"
      | "getContractBalance"
      | "getDonaterDetails"
      | "getNumberOfDonaters"
      | "idToOwner"
      | "removeDonatorToken"
      | "spendVotingTokensOnProject"
      | "updateDonatedAmount"
      | "userHasDonated"
      | "userHasVoted"
      | "voteForProject"
      | "votes"
      | "withdrawMoney"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DonaterAdded" | "DonationAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeDonatorMailAdress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOfVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonaterDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDonaters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "idToOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDonatorToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spendVotingTokensOnProject",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDonatedAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasDonated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForProject",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdrawMoney",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeDonatorMailAdress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOfVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonaterDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDonaters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDonatorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendVotingTokensOnProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDonatedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasDonated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMoney",
    data: BytesLike
  ): Result;
}

export namespace DonaterAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    mail: string,
    donatedAmount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, mail: string, donatedAmount: bigint];
  export interface OutputObject {
    id: bigint;
    mail: string;
    donatedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    mail: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, mail: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    mail: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vote extends BaseContract {
  connect(runner?: ContractRunner | null): Vote;
  waitForDeployment(): Promise<this>;

  interface: VoteInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeDonatorMailAdress: TypedContractMethod<
    [_mail: string],
    [void],
    "nonpayable"
  >;

  getAmountOfVotes: TypedContractMethod<
    [_projectId: BigNumberish],
    [bigint],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getDonaterDetails: TypedContractMethod<
    [],
    [Donate.DonaterStructOutput],
    "view"
  >;

  getNumberOfDonaters: TypedContractMethod<[], [bigint], "view">;

  idToOwner: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  removeDonatorToken: TypedContractMethod<
    [_idDonator: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  spendVotingTokensOnProject: TypedContractMethod<
    [_projectId: BigNumberish, _amountVotingTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateDonatedAmount: TypedContractMethod<
    [_mail: string, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userHasDonated: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userHasVoted: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  voteForProject: TypedContractMethod<
    [_projectId: BigNumberish, _amountVotingTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  votes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        user: string;
        projectId: bigint;
        votingTokens: bigint;
      }
    ],
    "view"
  >;

  withdrawMoney: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeDonatorMailAdress"
  ): TypedContractMethod<[_mail: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAmountOfVotes"
  ): TypedContractMethod<[_projectId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDonaterDetails"
  ): TypedContractMethod<[], [Donate.DonaterStructOutput], "view">;
  getFunction(
    nameOrSignature: "getNumberOfDonaters"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "idToOwner"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeDonatorToken"
  ): TypedContractMethod<
    [_idDonator: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spendVotingTokensOnProject"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _amountVotingTokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDonatedAmount"
  ): TypedContractMethod<
    [_mail: string, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userHasDonated"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userHasVoted"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "voteForProject"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _amountVotingTokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        user: string;
        projectId: bigint;
        votingTokens: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawMoney"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DonaterAdded"
  ): TypedContractEvent<
    DonaterAddedEvent.InputTuple,
    DonaterAddedEvent.OutputTuple,
    DonaterAddedEvent.OutputObject
  >;
  getEvent(
    key: "DonationAdded"
  ): TypedContractEvent<
    DonationAddedEvent.InputTuple,
    DonationAddedEvent.OutputTuple,
    DonationAddedEvent.OutputObject
  >;

  filters: {
    "DonaterAdded(uint256,string,uint256)": TypedContractEvent<
      DonaterAddedEvent.InputTuple,
      DonaterAddedEvent.OutputTuple,
      DonaterAddedEvent.OutputObject
    >;
    DonaterAdded: TypedContractEvent<
      DonaterAddedEvent.InputTuple,
      DonaterAddedEvent.OutputTuple,
      DonaterAddedEvent.OutputObject
    >;

    "DonationAdded(uint256,string,uint256)": TypedContractEvent<
      DonationAddedEvent.InputTuple,
      DonationAddedEvent.OutputTuple,
      DonationAddedEvent.OutputObject
    >;
    DonationAdded: TypedContractEvent<
      DonationAddedEvent.InputTuple,
      DonationAddedEvent.OutputTuple,
      DonationAddedEvent.OutputObject
    >;
  };
}
