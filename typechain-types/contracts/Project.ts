/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ProjectInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeDescription"
      | "createProjectData"
      | "currentFunding"
      | "endProject"
      | "fundingGoal"
      | "getDonationAmount"
      | "projectDescription"
      | "projectOwner"
      | "projectTitle"
      | "projects"
      | "startProject"
      | "startVoting"
      | "state"
      | "transferFunds"
      | "vote"
      | "votes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FundingGoalReached" | "StateChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProjectData",
    values: [AddressLike, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endProject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projectDescription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectTitle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startProject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferFunds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "votes", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "changeDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProjectData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectTitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export namespace FundingGoalReachedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StateChangedEvent {
  export type InputTuple = [newState: BigNumberish];
  export type OutputTuple = [newState: bigint];
  export interface OutputObject {
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Project extends BaseContract {
  connect(runner?: ContractRunner | null): Project;
  waitForDeployment(): Promise<this>;

  interface: ProjectInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeDescription: TypedContractMethod<
    [_newDescription: string],
    [void],
    "nonpayable"
  >;

  createProjectData: TypedContractMethod<
    [
      _owner: AddressLike,
      _orgaState: BigNumberish,
      _title: string,
      _description: string,
      _goal: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  currentFunding: TypedContractMethod<[], [bigint], "view">;

  endProject: TypedContractMethod<[], [void], "nonpayable">;

  fundingGoal: TypedContractMethod<[], [bigint], "view">;

  getDonationAmount: TypedContractMethod<
    [_donor: AddressLike],
    [bigint],
    "view"
  >;

  projectDescription: TypedContractMethod<[], [string], "view">;

  projectOwner: TypedContractMethod<[], [string], "view">;

  projectTitle: TypedContractMethod<[], [string], "view">;

  projects: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, bigint] & {
        projectOwner: string;
        projectTitle: string;
        projectDescription: string;
        fundingGoal: bigint;
        currentFunding: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  startProject: TypedContractMethod<[], [void], "nonpayable">;

  startVoting: TypedContractMethod<[], [void], "nonpayable">;

  state: TypedContractMethod<[], [bigint], "view">;

  transferFunds: TypedContractMethod<[], [void], "nonpayable">;

  vote: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  votes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeDescription"
  ): TypedContractMethod<[_newDescription: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProjectData"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _orgaState: BigNumberish,
      _title: string,
      _description: string,
      _goal: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentFunding"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endProject"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundingGoal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDonationAmount"
  ): TypedContractMethod<[_donor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "projectDescription"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectTitle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, bigint] & {
        projectOwner: string;
        projectTitle: string;
        projectDescription: string;
        fundingGoal: bigint;
        currentFunding: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "startProject"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "FundingGoalReached"
  ): TypedContractEvent<
    FundingGoalReachedEvent.InputTuple,
    FundingGoalReachedEvent.OutputTuple,
    FundingGoalReachedEvent.OutputObject
  >;
  getEvent(
    key: "StateChanged"
  ): TypedContractEvent<
    StateChangedEvent.InputTuple,
    StateChangedEvent.OutputTuple,
    StateChangedEvent.OutputObject
  >;

  filters: {
    "FundingGoalReached(uint256)": TypedContractEvent<
      FundingGoalReachedEvent.InputTuple,
      FundingGoalReachedEvent.OutputTuple,
      FundingGoalReachedEvent.OutputObject
    >;
    FundingGoalReached: TypedContractEvent<
      FundingGoalReachedEvent.InputTuple,
      FundingGoalReachedEvent.OutputTuple,
      FundingGoalReachedEvent.OutputObject
    >;

    "StateChanged(uint8)": TypedContractEvent<
      StateChangedEvent.InputTuple,
      StateChangedEvent.OutputTuple,
      StateChangedEvent.OutputObject
    >;
    StateChanged: TypedContractEvent<
      StateChangedEvent.InputTuple,
      StateChangedEvent.OutputTuple,
      StateChangedEvent.OutputObject
    >;
  };
}
