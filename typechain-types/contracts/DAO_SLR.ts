/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ProjectStruct = {
  projectId: BigNumberish;
  organizationId: BigNumberish;
  projectOwner: AddressLike;
  projectTitle: string;
  projectDescription: string;
  fundingGoal: BigNumberish;
  currentFunding: BigNumberish;
  totalVotes: BigNumberish;
  state: BigNumberish;
  creationTimestamp: BigNumberish;
};

export type ProjectStructOutput = [
  projectId: bigint,
  organizationId: bigint,
  projectOwner: string,
  projectTitle: string,
  projectDescription: string,
  fundingGoal: bigint,
  currentFunding: bigint,
  totalVotes: bigint,
  state: bigint,
  creationTimestamp: bigint
] & {
  projectId: bigint;
  organizationId: bigint;
  projectOwner: string;
  projectTitle: string;
  projectDescription: string;
  fundingGoal: bigint;
  currentFunding: bigint;
  totalVotes: bigint;
  state: bigint;
  creationTimestamp: bigint;
};

export type OrganizationStruct = {
  organizationId: BigNumberish;
  walletAddress: AddressLike;
  organizationName: string;
  organizationDescription: string;
  state: BigNumberish;
  votes: BigNumberish;
  downVotes: BigNumberish;
};

export type OrganizationStructOutput = [
  organizationId: bigint,
  walletAddress: string,
  organizationName: string,
  organizationDescription: string,
  state: bigint,
  votes: bigint,
  downVotes: bigint
] & {
  organizationId: bigint;
  walletAddress: string;
  organizationName: string;
  organizationDescription: string;
  state: bigint;
  votes: bigint;
  downVotes: bigint;
};

export interface DAO_SLRInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "createOrganization"
      | "createProject"
      | "createReceipt"
      | "doesDonorExist"
      | "doesProjectExist"
      | "donors"
      | "endProject"
      | "exceededTimeLimit"
      | "getApproved"
      | "getDonorTokenBalance"
      | "getLastTenProjects"
      | "getOrganization"
      | "getOrganizationById"
      | "getOrganizationState"
      | "getProjectsInRange"
      | "hasEnoughVotesForOnboarding"
      | "hasReachedFundingGoal"
      | "isApprovedForAll"
      | "isControversial"
      | "name"
      | "nftsCreated"
      | "organizationIdToAddress"
      | "organizations"
      | "organizationsCount"
      | "ownerOf"
      | "projectToOrganization"
      | "projects"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenMultiplier"
      | "tokenURI"
      | "transferFrom"
      | "transitionFromEnded"
      | "transitionFromStarted"
      | "transitionFromVoting"
      | "vote"
      | "voteAgainstOrganization"
      | "voteForOrganization"
      | "voteForProject"
      | "votes"
      | "votesAgainstOrga"
      | "votesForOrga"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "FundingGoalReached"
      | "MetadataUpdate"
      | "StateChanged"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrganization",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [AddressLike, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createReceipt",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doesDonorExist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doesProjectExist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donors", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "endProject",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exceededTimeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastTenProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectsInRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEnoughVotesForOnboarding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReachedFundingGoal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isControversial",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftsCreated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationIdToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectToOrganization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transitionFromEnded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transitionFromStarted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transitionFromVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteAgainstOrganization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForOrganization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForProject",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "votes", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "votesAgainstOrga",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votesForOrga",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesDonorExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesProjectExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exceededTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastTenProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectsInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEnoughVotesForOnboarding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReachedFundingGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControversial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationIdToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectToOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitionFromEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitionFromStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitionFromVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteAgainstOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesAgainstOrga",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votesForOrga",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundingGoalReachedEvent {
  export type InputTuple = [_projectId: BigNumberish, _amount: BigNumberish];
  export type OutputTuple = [_projectId: bigint, _amount: bigint];
  export interface OutputObject {
    _projectId: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StateChangedEvent {
  export type InputTuple = [_projectId: BigNumberish, _newState: BigNumberish];
  export type OutputTuple = [_projectId: bigint, _newState: bigint];
  export interface OutputObject {
    _projectId: bigint;
    _newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAO_SLR extends BaseContract {
  connect(runner?: ContractRunner | null): DAO_SLR;
  waitForDeployment(): Promise<this>;

  interface: DAO_SLRInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  createOrganization: TypedContractMethod<
    [
      _walletAddress: AddressLike,
      _organizationName: string,
      _organizationDescription: string
    ],
    [void],
    "nonpayable"
  >;

  createProject: TypedContractMethod<
    [
      _owner: AddressLike,
      _organizationId: BigNumberish,
      _title: string,
      _description: string,
      _goal: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createReceipt: TypedContractMethod<
    [
      _recipient: AddressLike,
      _projectId: BigNumberish,
      _donationAmount: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  doesDonorExist: TypedContractMethod<[_donor: AddressLike], [boolean], "view">;

  doesProjectExist: TypedContractMethod<
    [_projectId: BigNumberish],
    [boolean],
    "view"
  >;

  donors: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { donorAddress: string; votingTokens: bigint }],
    "view"
  >;

  endProject: TypedContractMethod<
    [_projectId: BigNumberish, _proofUrl: string],
    [void],
    "nonpayable"
  >;

  exceededTimeLimit: TypedContractMethod<
    [_projectId: BigNumberish],
    [boolean],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getDonorTokenBalance: TypedContractMethod<
    [_donor: AddressLike],
    [bigint],
    "view"
  >;

  getLastTenProjects: TypedContractMethod<[], [ProjectStructOutput[]], "view">;

  getOrganization: TypedContractMethod<
    [_walletAddress: AddressLike],
    [OrganizationStructOutput],
    "view"
  >;

  getOrganizationById: TypedContractMethod<
    [_orgId: BigNumberish],
    [OrganizationStructOutput],
    "view"
  >;

  getOrganizationState: TypedContractMethod<
    [_walletAddress: AddressLike],
    [bigint],
    "view"
  >;

  getProjectsInRange: TypedContractMethod<
    [_from: BigNumberish, _to: BigNumberish],
    [ProjectStructOutput[]],
    "view"
  >;

  hasEnoughVotesForOnboarding: TypedContractMethod<
    [_orgaId: BigNumberish],
    [boolean],
    "view"
  >;

  hasReachedFundingGoal: TypedContractMethod<
    [_projectId: BigNumberish],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isControversial: TypedContractMethod<
    [_orgaId: BigNumberish],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nftsCreated: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  organizationIdToAddress: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  organizations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, string, string, bigint, bigint, bigint] & {
        organizationId: bigint;
        walletAddress: string;
        organizationName: string;
        organizationDescription: string;
        state: bigint;
        votes: bigint;
        downVotes: bigint;
      }
    ],
    "view"
  >;

  organizationsCount: TypedContractMethod<[], [bigint], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  projectToOrganization: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        projectId: bigint;
        organizationId: bigint;
        projectOwner: string;
        projectTitle: string;
        projectDescription: string;
        fundingGoal: bigint;
        currentFunding: bigint;
        totalVotes: bigint;
        state: bigint;
        creationTimestamp: bigint;
      }
    ],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenMultiplier: TypedContractMethod<[], [bigint], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transitionFromEnded: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transitionFromStarted: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transitionFromVoting: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_projectId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteAgainstOrganization: TypedContractMethod<
    [_orgaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteForOrganization: TypedContractMethod<
    [_orgaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteForProject: TypedContractMethod<
    [_projectId: BigNumberish, _tokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  votes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  votesAgainstOrga: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  votesForOrga: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  withdrawFunds: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createOrganization"
  ): TypedContractMethod<
    [
      _walletAddress: AddressLike,
      _organizationName: string,
      _organizationDescription: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _organizationId: BigNumberish,
      _title: string,
      _description: string,
      _goal: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createReceipt"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _projectId: BigNumberish,
      _donationAmount: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doesDonorExist"
  ): TypedContractMethod<[_donor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "doesProjectExist"
  ): TypedContractMethod<[_projectId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "donors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { donorAddress: string; votingTokens: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "endProject"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _proofUrl: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exceededTimeLimit"
  ): TypedContractMethod<[_projectId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDonorTokenBalance"
  ): TypedContractMethod<[_donor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastTenProjects"
  ): TypedContractMethod<[], [ProjectStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getOrganization"
  ): TypedContractMethod<
    [_walletAddress: AddressLike],
    [OrganizationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizationById"
  ): TypedContractMethod<
    [_orgId: BigNumberish],
    [OrganizationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizationState"
  ): TypedContractMethod<[_walletAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProjectsInRange"
  ): TypedContractMethod<
    [_from: BigNumberish, _to: BigNumberish],
    [ProjectStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasEnoughVotesForOnboarding"
  ): TypedContractMethod<[_orgaId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasReachedFundingGoal"
  ): TypedContractMethod<[_projectId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isControversial"
  ): TypedContractMethod<[_orgaId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftsCreated"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "organizationIdToAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "organizations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, string, string, bigint, bigint, bigint] & {
        organizationId: bigint;
        walletAddress: string;
        organizationName: string;
        organizationDescription: string;
        state: bigint;
        votes: bigint;
        downVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "organizationsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "projectToOrganization"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        projectId: bigint;
        organizationId: bigint;
        projectOwner: string;
        projectTitle: string;
        projectDescription: string;
        fundingGoal: bigint;
        currentFunding: bigint;
        totalVotes: bigint;
        state: bigint;
        creationTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transitionFromEnded"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transitionFromStarted"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transitionFromVoting"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteAgainstOrganization"
  ): TypedContractMethod<[_orgaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteForOrganization"
  ): TypedContractMethod<[_orgaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteForProject"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _tokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "votesAgainstOrga"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "votesForOrga"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "FundingGoalReached"
  ): TypedContractEvent<
    FundingGoalReachedEvent.InputTuple,
    FundingGoalReachedEvent.OutputTuple,
    FundingGoalReachedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "StateChanged"
  ): TypedContractEvent<
    StateChangedEvent.InputTuple,
    StateChangedEvent.OutputTuple,
    StateChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "FundingGoalReached(uint256,uint256)": TypedContractEvent<
      FundingGoalReachedEvent.InputTuple,
      FundingGoalReachedEvent.OutputTuple,
      FundingGoalReachedEvent.OutputObject
    >;
    FundingGoalReached: TypedContractEvent<
      FundingGoalReachedEvent.InputTuple,
      FundingGoalReachedEvent.OutputTuple,
      FundingGoalReachedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "StateChanged(uint256,uint8)": TypedContractEvent<
      StateChangedEvent.InputTuple,
      StateChangedEvent.OutputTuple,
      StateChangedEvent.OutputObject
    >;
    StateChanged: TypedContractEvent<
      StateChangedEvent.InputTuple,
      StateChangedEvent.OutputTuple,
      StateChangedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
