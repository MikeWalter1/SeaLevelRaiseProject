/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DAO_SLRInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createNewOrganization"
      | "createProject"
      | "createReceipt"
      | "donationReceiptPrinter"
      | "getDonorTokenBalance"
      | "getProjectOwnerState"
      | "hasReceivedNFT"
      | "isProjectOwnerDaoMember"
      | "organizationManager"
      | "organizations"
      | "projectCount"
      | "projectOwnerOnboarded"
      | "projects"
      | "showProjectDetails"
      | "tokenMultiplier"
      | "voteForProject"
      | "votingTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createNewOrganization",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createReceipt",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donationReceiptPrinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectOwnerState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReceivedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProjectOwnerDaoMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectOwnerOnboarded",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "showProjectDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteForProject",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingTokens",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationReceiptPrinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectOwnerState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReceivedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProjectOwnerDaoMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectOwnerOnboarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showProjectDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingTokens",
    data: BytesLike
  ): Result;
}

export interface DAO_SLR extends BaseContract {
  connect(runner?: ContractRunner | null): DAO_SLR;
  waitForDeployment(): Promise<this>;

  interface: DAO_SLRInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createNewOrganization: TypedContractMethod<
    [_organizationName: string, _organisationDescription: string],
    [void],
    "nonpayable"
  >;

  createProject: TypedContractMethod<
    [_title: string, _description: string, _goal: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createReceipt: TypedContractMethod<
    [
      _recipient: AddressLike,
      _projectId: BigNumberish,
      _donationAmount: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  donationReceiptPrinter: TypedContractMethod<[], [string], "view">;

  getDonorTokenBalance: TypedContractMethod<[], [bigint], "view">;

  getProjectOwnerState: TypedContractMethod<
    [_projectOwner: AddressLike],
    [bigint],
    "view"
  >;

  hasReceivedNFT: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isProjectOwnerDaoMember: TypedContractMethod<
    [_projectOwner: AddressLike],
    [boolean],
    "view"
  >;

  organizationManager: TypedContractMethod<[], [string], "view">;

  organizations: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  projectCount: TypedContractMethod<[], [bigint], "view">;

  projectOwnerOnboarded: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  projects: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  showProjectDetails: TypedContractMethod<
    [_projectId: BigNumberish],
    [[string, bigint, bigint, bigint, bigint]],
    "view"
  >;

  tokenMultiplier: TypedContractMethod<[], [bigint], "view">;

  voteForProject: TypedContractMethod<
    [_projectId: BigNumberish, _tokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingTokens: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createNewOrganization"
  ): TypedContractMethod<
    [_organizationName: string, _organisationDescription: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [_title: string, _description: string, _goal: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createReceipt"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _projectId: BigNumberish,
      _donationAmount: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donationReceiptPrinter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDonorTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProjectOwnerState"
  ): TypedContractMethod<[_projectOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasReceivedNFT"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isProjectOwnerDaoMember"
  ): TypedContractMethod<[_projectOwner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "organizationManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "organizations"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "projectCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projectOwnerOnboarded"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "showProjectDetails"
  ): TypedContractMethod<
    [_projectId: BigNumberish],
    [[string, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voteForProject"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _tokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingTokens"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  filters: {};
}
